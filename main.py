import os                   # –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—É—Ç—è–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
import time                 # –î–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫, –∑–∞–º–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
import openai               # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API (GPT)
import telebot              # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º (pyTelegramBotAPI)
from flask import Flask, request  # Flask –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook-—Å–µ—Ä–≤–µ—Ä–∞
import subprocess           # –î–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ffmpeg)
from deepgram import Deepgram  # SDK Deepgram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg (–Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏)
try:
    result = subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print("üéâ ffmpeg –Ω–∞–π–¥–µ–Ω:\n", result.stdout.decode())
except FileNotFoundError:
    print("‚ùå ffmpeg –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")              # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")         # –ö–ª—é—á API OpenAI
WEBHOOK_URL = os.getenv("WEBHOOK_URL")               # URL –¥–ª—è webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Flask)
CREATOR_ID = int(os.getenv("CREATOR_ID", "414284170"))  # Telegram ID –°—Ç–∞—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
CHANNEL_ID = -1001889831695  # Telegram ID –∫–∞–Ω–∞–ª–∞ @stasnastavnik

# Deepgram
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")     # –ö–ª—é—á Deepgram API
if not DEEPGRAM_API_KEY:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω DEEPGRAM_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    print("üîë Deepgram API key –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤):", DEEPGRAM_API_KEY[:5])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ Flask-—Å–µ—Ä–≤–µ—Ä–∞
bot = telebot.TeleBot(API_TOKEN)                     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
openai.api_key = OPENAI_API_KEY                      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ OpenAI
app = Flask(__name__)                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–ú–° =====

@bot.message_handler(content_types=['text'])  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(message):
    user_input = message.text.strip()         # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id            # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = message.chat.id                 # ID —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≥—Ä—É–ø–ø–æ–π, –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –ª–∏—á–∫–æ–π)

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –≤ —Ñ–∞–π–ª logs/raw.txt
    with open("logs/raw.txt", "a", encoding="utf-8") as f:
        f.write(f"{user_id}: {user_input}\n")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [user_id]: [—Å–æ–æ–±—â–µ–Ω–∏–µ]

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç –°—Ç–∞—Å–∞ –∏–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if user_id == CREATOR_ID or chat_id == CHANNEL_ID:
        print("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", os.path.exists("memory_core.txt"))              # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏
        print("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", os.path.getsize("memory_core.txt"), "–±–∞–π—Ç")        # –í—ã–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏

        with open("memory_core.txt", "a", encoding="utf-8") as f:
            f.write(user_input + "\n")                                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å

        if user_id == CREATOR_ID:
            with open("logs/questions.txt", "a", encoding="utf-8") as f:
                f.write(user_input + "\n")                                        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –°—Ç–∞—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ

        try:
            print("–ß—Ç–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏...")                                             # –ó–∞–≥—Ä—É–∂–∞–µ–º backup –∏ core –ø–∞–º—è—Ç—å
            with open("memory_backup.txt", "r", encoding="utf-8") as backup:
                backup_data = backup.read()
            with open("memory_core.txt", "r", encoding="utf-8") as core:
                core_data = core.read()

            memory = backup_data + "\n" + core_data                               # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞–º—è—Ç—å
            print("üîÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º: backup + core")
            print(f"üî¢ –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {len(memory)} —Å–∏–º–≤–æ–ª–æ–≤")

            start_time = time.time()                                              # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

            print("–ó–∞–ø—Ä–æ—Å –∫ OpenAI...")
            system_prompt = (
                "–¢—ã ‚Äî –•–∞—Ä—Ç–∏—è. –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–æ–ª–æ—Å –°—Ç–∞—Å–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –æ–Ω: —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º, –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å."
            )

            response = openai.ChatCompletion.create(                              # –ó–∞–ø—Ä–æ—Å –∫ GPT-4 —Å –ø–∞–º—è—Ç—å—é
                model="gpt-4-0613",
                messages=[
                    {"role": "system", "content": system_prompt + "\n\n" + memory},
                    {"role": "user", "content": user_input}
                ],
                max_tokens=400,
                temperature=0.8
            )

            elapsed = time.time() - start_time
            reply_text = response.choices[0].message["content"]
            print(f"–û—Ç–≤–µ—Ç OpenAI: {reply_text}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed:.2f} —Å–µ–∫")

            if user_id == CREATOR_ID:
                bot.reply_to(message, reply_text)                                 # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –°—Ç–∞—Å—É (–ª–∏—á–∫–∞)

        except Exception as e:
            import traceback
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:\n{traceback.format_exc()}")    # –û—à–∏–±–∫–∞ GPT-–∑–∞–ø—Ä–æ—Å–∞
            if user_id == CREATOR_ID:
                bot.reply_to(message, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôÉ")  # –û—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –°—Ç–∞—Å—É

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• =====

@bot.message_handler(content_types=['voice'])  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_voice(message):
    try:
        user_id = message.from_user.id if message.from_user else CREATOR_ID  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        chat_id = message.chat.id

        print("üì• –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram
        file_info = bot.get_file(message.voice.file_id)         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = bot.download_file(file_info.file_path)           # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

        ogg_path = f"voice/{message.voice.file_id}.ogg"         # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        os.makedirs("voice", exist_ok=True)                     # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É voice, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        with open(ogg_path, 'wb') as f:
            f.write(file)                                       # –°–æ—Ö—Ä–∞–Ω—è–µ–º .ogg-—Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ

        # Deepgram SDK v3 ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        api_key = os.getenv("DEEPGRAM_API_KEY")                 # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        dg = DeepgramClient(api_key)                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Deepgram

        with open(ogg_path, 'rb') as audio:                     # –û—Ç–∫—Ä—ã–≤–∞–µ–º .ogg-—Ñ–∞–π–ª
            source: FileSource = {
                "buffer": audio,
                "mimetype": "audio/ogg; codecs=opus"            # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç OGG —Å –∫–æ–¥–µ–∫–æ–º Opus
            }
            options: PrerecordedOptions = {
                "model": "nova",                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Nova (–ª—É—á—à–∞—è)
                "language": "ru"                                # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            }
            response = dg.listen.prerecorded.transcribe_file(
                source=source,
                options=options
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        user_input = response["results"]["channels"][0]["alternatives"][0].get("transcript", "").strip()
        if not user_input:
            raise ValueError("–ü—É—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ—Ç Deepgram")

        print(f"üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (Deepgram): {user_input}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
        with open("logs/raw.txt", "a", encoding="utf-8") as f:
            f.write(f"{user_id}: {user_input}\n")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –°—Ç–∞—Å –∏–ª–∏ –∫–∞–Ω–∞–ª
        if user_id == CREATOR_ID or chat_id == CHANNEL_ID:
            print("üìå –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å:", user_input)
            with open("memory_core.txt", "a", encoding="utf-8") as f:
                f.write(user_input + "\n")         # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å
            if user_id == CREATOR_ID:
                with open("logs/questions.txt", "a", encoding="utf-8") as f:
                    f.write(user_input + "\n")     # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –≤–æ–ø—Ä–æ—Å—ã –°—Ç–∞—Å–∞

        # –ß–∏—Ç–∞–µ–º backup –∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "r", encoding="utf-8") as core:
            core_data = core.read()
        memory = backup_data + "\n" + core_data     # –û–±—ä–µ–¥–∏–Ω—è–µ–º

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI (GPT-4)
        system_prompt = (
            "–¢—ã ‚Äî –•–∞—Ä—Ç–∏—è. –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–æ–ª–æ—Å –°—Ç–∞—Å–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –æ–Ω: —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º, –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å."
        )

        response = openai.ChatCompletion.create(
            model="gpt-4-0613",
            messages=[
                {"role": "system", "content": system_prompt + "\n\n" + memory},
                {"role": "user", "content": user_input}
            ],
            max_tokens=400,
            temperature=0.8
        )

        reply_text = response.choices[0].message["content"]
        print("üé§ –û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ:", reply_text)

        if user_id == CREATOR_ID:
            bot.reply_to(message, reply_text)       # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –°—Ç–∞—Å—É

    except Exception as e:
        import traceback
        error_text = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:\n{error_text}")
        if 'user_id' in locals() and user_id == CREATOR_ID:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ\n" + str(e))
            
# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ (Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å POST-–∑–∞–ø—Ä–æ—Å—ã —Å—é–¥–∞)
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([
        telebot.types.Update.de_json(request.stream.read().decode("utf-8"))  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    ])
    return "ok", 200  # Telegram –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç 200 OK

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (—á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ—Ä–Ω—é "/")
@app.route("/", methods=["GET"])
def index():
    bot.remove_webhook()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –°—Ç–∞—Å–∞)
@app.route("/memory", methods=["GET"])
def view_memory():
    token = request.args.get("key")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ Telegram ID
    if token != str(CREATOR_ID):
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω üôÖ", 403
    try:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "r", encoding="utf-8") as core:
            core_data = core.read()
        return f"<pre>{backup_data + '\n' + core_data}</pre>", 200  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–º—è—Ç—å –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}", 500

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø–∞–º—è—Ç–∏
@app.route("/memory-size", methods=["GET"])
def memory_size():
    try:
        core_size = os.path.getsize("memory_core.txt")      # –†–∞–∑–º–µ—Ä core —Ñ–∞–π–ª–∞
        backup_size = os.path.getsize("memory_backup.txt")  # –†–∞–∑–º–µ—Ä backup —Ñ–∞–π–ª–∞
        return f"–†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏:\nCore: {core_size} –±–∞–π—Ç\nBackup: {backup_size} –±–∞–π—Ç", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}", 500

# üß† –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏–∑ backup, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
try:
    if not os.path.exists("memory_core.txt") or os.stat("memory_core.txt").st_size == 0:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "w", encoding="utf-8") as f:
            f.write(backup_data)
        print("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å –∏–∑ memory_backup.txt")
    else:
        print("‚úÖ –ü–∞–º—è—Ç—å —É–∂–µ –µ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

# üìç –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")  # –°—Ç–∞–≤–∏–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

    print("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    if os.path.exists("memory_core.txt"):
        print("–§–∞–π–ª memory_core.txt –Ω–∞–π–¥–µ–Ω. –†–∞–∑–º–µ—Ä:", os.path.getsize("memory_core.txt"), "–±–∞–π—Ç")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª memory_core.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    port = int(os.environ.get("PORT", 5000))       # –ß—Ç–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Heroku)
    app.run(host="0.0.0.0", port=port)             # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
