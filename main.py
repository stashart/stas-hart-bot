import os
import openai
import telebot
from flask import Flask, request

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
CREATOR_ID = int(os.getenv("CREATOR_ID", "414284170"))  # Telegram ID –°—Ç–∞—Å–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
bot = telebot.TeleBot(API_TOKEN)
openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_input = message.text.strip()
    user_id = message.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë
    with open("logs/raw.txt", "a", encoding="utf-8") as f:
        f.write(f"{user_id}: {user_input}\n")

    # –¢–æ–ª—å–∫–æ –°—Ç–∞—Å–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
    if user_id == CREATOR_ID:
        # –ü–∞–º—è—Ç—å
        with open("memory_core.txt", "a", encoding="utf-8") as f:
            f.write(user_input + "\n")

        # –õ–æ–≥ –≤–æ–ø—Ä–æ—Å–æ–≤
        with open("logs/questions.txt", "a", encoding="utf-8") as f:
            f.write(user_input + "\n")

        try:
            print("–ß—Ç–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏...")

            # –ß–∏—Ç–∞–µ–º backup –∏ core –≤–º–µ—Å—Ç–µ
            with open("memory_backup.txt", "r", encoding="utf-8") as backup:
                backup_data = backup.read()
            with open("memory_core.txt", "r", encoding="utf-8") as core:
                core_data = core.read()

            memory = backup_data + "\n" + core_data

            print("–ó–∞–ø—Ä–æ—Å –∫ OpenAI...")
            system_prompt = (
                "–¢—ã ‚Äî –•–∞—Ä—Ç–∏—è. –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–æ–ª–æ—Å –°—Ç–∞—Å–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –æ–Ω: —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º, –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å."
            )

            response = openai.ChatCompletion.create(
                model="gpt-4-0613",
                messages=[
                    {"role": "system", "content": system_prompt + "\n\n" + memory},
                    {"role": "user", "content": user_input}
                ],
                max_tokens=400,
                temperature=0.8
            )

            reply_text = response.choices[0].message["content"]
            print(f"–û—Ç–≤–µ—Ç OpenAI: {reply_text}")
            bot.reply_to(message, reply_text)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
            bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôÉ")

# Webhook
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")
    return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –°—Ç–∞—Å–∞
@app.route("/memory", methods=["GET"])
def view_memory():
    token = request.args.get("key")
    if token != str(CREATOR_ID):
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω üôÖ", 403
    try:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "r", encoding="utf-8") as core:
            core_data = core.read()
        full_memory = backup_data + "\n" + core_data
        return f"<pre>{full_memory}</pre>", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}", 500

# üß† –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ: –µ—Å–ª–∏ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π
try:
    if not os.path.exists("memory_core.txt") or os.stat("memory_core.txt").st_size == 0:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "w", encoding="utf-8") as f:
            f.write(backup_data)
        print("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å –∏–∑ memory_backup.txt")
    else:
        print("‚úÖ –ü–∞–º—è—Ç—å —É–∂–µ –µ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
