# === –ò–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
import os
import time
import openai
import telebot
from flask import Flask, request
import subprocess
from deepgram import DeepgramClient, FileSource, PrerecordedOptions  # üé§ Deepgram SDK v4
import asyncio                  # ‚è± async –æ–±—Ä–∞–±–æ—Ç–∫–∞

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã ===

API_TOKEN = os.getenv("TELEGRAM_TOKEN")              # üîë –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")         # üîë API –∫–ª—é—á OpenAI
WEBHOOK_URL = os.getenv("WEBHOOK_URL")               # üåê Webhook URL
CREATOR_ID = int(os.getenv("CREATOR_ID", "414284170"))  # üë§ ID –°—Ç–∞—Å–∞
CHANNEL_ID = -1001889831695                           # üì£ ID –∫–∞–Ω–∞–ª–∞ @stasnastavnik
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")     # üîë –ö–ª—é—á Deepgram

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ ===

bot = telebot.TeleBot(API_TOKEN)                      # ü§ñ Telegram-–±–æ—Ç
openai.api_key = OPENAI_API_KEY                       # üß† –ö–ª—é—á OpenAI
app = Flask(__name__)                                 # üöÄ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
os.makedirs("logs", exist_ok=True)                    # üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤
os.makedirs("voice", exist_ok=True)                   # üé§ –ü–∞–ø–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg ===

if subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE).returncode == 0:
    print("üéâ ffmpeg –Ω–∞–π–¥–µ–Ω")
else:
    print("‚ùå ffmpeg –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def is_creator_or_channel(user_id, chat_id):
    return user_id == CREATOR_ID or chat_id == CHANNEL_ID

def read_memory():
    try:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            backup_data = backup.read()
        with open("memory_core.txt", "r", encoding="utf-8") as core:
            core_data = core.read()
        return backup_data + "\n" + core_data
    except:
        return ""

def log_raw(user_id, text):
    with open("logs/raw.txt", "a", encoding="utf-8") as f:
        f.write(f"{user_id}: {text}\n")

def log_question(text):
    with open("logs/questions.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

def save_to_memory(text):
    with open("memory_core.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

def ask_openai(user_input, memory):
    system_prompt = (
        "–¢—ã ‚Äî –•–∞—Ä—Ç–∏—è. –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–æ–ª–æ—Å –°—Ç–∞—Å–∞. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –æ–Ω: —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º, –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å."
    )
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": system_prompt + "\n\n" + memory},
            {"role": "user", "content": user_input}
        ],
        max_tokens=400,
        temperature=0.8
    )
    return response.choices[0].message["content"]

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_input = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id

    log_raw(user_id, user_input)  # üìù –õ–æ–≥–∏—Ä—É–µ–º

    if is_creator_or_channel(user_id, chat_id):  # üìå –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°—Ç–∞—Å–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        save_to_memory(user_input)
        if user_id == CREATOR_ID:
            log_question(user_input)  # üìö –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å

        try:
            memory = read_memory()  # üß† –ß–∏—Ç–∞–µ–º –ø–∞–º—è—Ç—å
            reply_text = ask_openai(user_input, memory)  # ü§ñ –û—Ç–≤–µ—Ç –æ—Ç GPT
            bot.reply_to(message, reply_text)  # üîÅ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        except Exception as e:
            import traceback
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            print(traceback.format_exc())
            if user_id == CREATOR_ID:
                bot.reply_to(message, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôÉ")

# ‚îÄ‚îÄ‚îÄ Debug-–ª–æ–≤–µ—Ü ‚Äî —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è bot ‚îÄ‚îÄ‚îÄ

@bot.message_handler(func=lambda m: True)
def debug_all_messages(message):
    print("üì® Debug all ‚Äî content_type =", message.content_type)
    # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å –æ–±—ä–µ–∫—Ç:
    # print(message)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===

# üéôÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Deepgram v4

def transcribe_voice(file_path: str) -> str:
    dg = DeepgramClient(DEEPGRAM_API_KEY)

    # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
    with open(file_path, 'rb') as audio_file:
        source = FileSource(
            buffer=audio_file.read(),
            mimetype="audio/ogg; codecs=opus"
        )
    # –û–ø—Ü–∏–∏: –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ "nova", "general" –∏ —Ç.–¥.
    options = PrerecordedOptions(
        model="nova",
        language="ru",
        punctuate=True
    )

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    response = dg.transcription.prerecorded(source=source, options=options)
    # –ë–µ—Ä—ë–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    transcript = response["results"]["channels"][0]["alternatives"][0]["transcript"]
    return transcript
    
@bot.message_handler(content_types=['voice', 'audio'])
def handle_voice(message):
    print("üì• –ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id if message.from_user else CREATOR_ID
        chat_id = message.chat.id
        print(f"üë§ user_id: {user_id}, chat_id: {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å voice –∏–ª–∏ audio
        if message.voice:
            file_id = message.voice.file_id
            print("üéôÔ∏è –¢–∏–ø: voice")
        elif message.audio:
            file_id = message.audio.file_id
            print("üéµ –¢–∏–ø: audio")
        else:
            print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ voice/audio —Ñ–∞–π–ª–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        print("üìÅ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —Å Telegram")

        ogg_path = f"voice/{file_id}.ogg"
        with open(ogg_path, 'wb') as f:
            f.write(file)
        print("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ:", ogg_path)

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Deepgram –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏...")
        user_input = transcribe_voice(ogg_path)
        print("üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:", user_input)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_raw(user_id, user_input)

        if is_creator_or_channel(user_id, chat_id):
            save_to_memory(user_input)
            print("üìå –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–∞–º—è—Ç—å")
            if user_id == CREATOR_ID:
                log_question(user_input)
                print("üìö –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ–ø—Ä–æ—Å")

        # –û—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –≤—ã–∑–æ–≤–∞ OpenAI
        if user_id == CREATOR_ID:
            bot.reply_to(message, "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:\n", traceback.format_exc())
        if 'user_id' in locals() and user_id == CREATOR_ID:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ\n{e}")

# === Webhook –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏ ===

@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    print("üì© –ü—Ä–∏—à—ë–ª webhook –æ—Ç Telegram")  # üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ Telegram —Å—Ç—É—á–∏—Ç—Å—è
    raw_update = request.stream.read().decode("utf-8")
    print("üåÄ RAW UPDATE:", raw_update)
    update = telebot.types.Update.de_json(raw_update)
    bot.process_new_updates([update])  # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
    return "ok", 200

# === Health check endpoint ===
@app.route("/", methods=["GET"])
def index():
    return "Service is running", 200  # üü¢ Simple health check

# === Memory endpoints ===
@app.route("/memory", methods=["GET"])
def view_memory():
    token = request.args.get("key")
    if token != str(CREATOR_ID):
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω üôÖ", 403
    try:
        memory = read_memory()
        return f"<pre>{memory}</pre>", 200  # üìñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–º—è—Ç—å –≤ HTML
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}", 500

@app.route("/memory-size", methods=["GET"])
def memory_size():
    try:
        core_size = os.path.getsize("memory_core.txt")
        backup_size = os.path.getsize("memory_backup.txt")
        return (
            f"–†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏:\nCore: {core_size} –±–∞–π—Ç\n"
            f"Backup: {backup_size} –±–∞–π—Ç"
        ), 200  # üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}", 500

# === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
try:
    if not os.path.exists("memory_core.txt") or os.stat("memory_core.txt").st_size == 0:
        with open("memory_backup.txt", "r", encoding="utf-8") as backup:
            data = backup.read()
        with open("memory_core.txt", "w", encoding="utf-8") as core:
            core.write(data)  # üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å –∏–∑ memory_backup.txt")
    else:
        print("‚úÖ –ü–∞–º—è—Ç—å —É–∂–µ –µ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    # üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    try:
        bot.remove_webhook()
        print("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

    # üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    try:
        bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", f"{WEBHOOK_URL}/{API_TOKEN}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

    # üöÄ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
